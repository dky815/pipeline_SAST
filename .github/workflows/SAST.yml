name: "SAST"

on:
  push:
    branches: [ "main" ]

jobs:
  CodeQL:
    runs-on: 'ubuntu-latest'
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'cpp'

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # - name: Custom build
    #   run: |
    #     g++ -g -std=c++17 -o fileserver main.cpp -lssl -lcrypto -I ./

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  SonarCloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v2
      - name: Run build-wrapper
        run: |
          mkdir build
          cmake -S . -B build
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

  Semgrep:
    permissions: write-all
    runs-on: ubuntu-latest

    container:
      image: returntocorp/semgrep

    if: (github.actor != 'dependabot[bot]')

    steps:
      - uses: actions/checkout@v3
      - run: semgrep ci --sarif --output=semgrep.sarif
        env:
          SEMGREP_RULES: p/c
      - name: Upload SARIF file for GitHub Advanced Security Dashboard
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif
          
  Coverity:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: config repo
      run: cmake -B ${{github.workspace}}/build
    - uses: vapier/coverity-scan-action@v1
      with:
        email: ${{ secrets.COVERITY_SCAN_EMAIL }}
        token: ${{ secrets.COVERITY_SCAN_TOKEN }}
        command: make -C ${{github.workspace}}/build